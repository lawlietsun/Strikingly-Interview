ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
if(newword != previousword){
# creat the Regex for word filtering
temp <- paste("[^", c, "]", sep="")
regex <- tolower(gsub("\\*", temp, newword))
subdata <- subdata[which(grepl(regex, as.character(subdata)))]
NumWordsHasA <- length(subdata[which(grepl("a", subdata))])
NumWordsHasB <- length(subdata[which(grepl("b", subdata))])
NumWordsHasC <- length(subdata[which(grepl("c", subdata))])
NumWordsHasD <- length(subdata[which(grepl("d", subdata))])
NumWordsHasE <- length(subdata[which(grepl("e", subdata))])
NumWordsHasF <- length(subdata[which(grepl("f", subdata))])
NumWordsHasG <- length(subdata[which(grepl("g", subdata))])
NumWordsHasH <- length(subdata[which(grepl("h", subdata))])
NumWordsHasI <- length(subdata[which(grepl("i", subdata))])
NumWordsHasJ <- length(subdata[which(grepl("j", subdata))])
NumWordsHasK <- length(subdata[which(grepl("k", subdata))])
NumWordsHasL <- length(subdata[which(grepl("l", subdata))])
NumWordsHasM <- length(subdata[which(grepl("m", subdata))])
NumWordsHasN <- length(subdata[which(grepl("n", subdata))])
NumWordsHasO <- length(subdata[which(grepl("o", subdata))])
NumWordsHasP <- length(subdata[which(grepl("p", subdata))])
NumWordsHasQ <- length(subdata[which(grepl("q", subdata))])
NumWordsHasR <- length(subdata[which(grepl("r", subdata))])
NumWordsHasS <- length(subdata[which(grepl("s", subdata))])
NumWordsHasT <- length(subdata[which(grepl("t", subdata))])
NumWordsHasU <- length(subdata[which(grepl("u", subdata))])
NumWordsHasV <- length(subdata[which(grepl("v", subdata))])
NumWordsHasW <- length(subdata[which(grepl("w", subdata))])
NumWordsHasX <- length(subdata[which(grepl("x", subdata))])
NumWordsHasY <- length(subdata[which(grepl("y", subdata))])
NumWordsHasZ <- length(subdata[which(grepl("z", subdata))])
NumWordTable <- matrix(c(NumWordsHasA,
NumWordsHasB,
NumWordsHasC,
NumWordsHasD,
NumWordsHasE,
NumWordsHasF,
NumWordsHasG,
NumWordsHasH,
NumWordsHasI,
NumWordsHasJ,
NumWordsHasK,
NumWordsHasL,
NumWordsHasM,
NumWordsHasN,
NumWordsHasO,
NumWordsHasP,
NumWordsHasQ,
NumWordsHasR,
NumWordsHasS,
NumWordsHasT,
NumWordsHasU,
NumWordsHasV,
NumWordsHasW,
NumWordsHasX,
NumWordsHasY,
NumWordsHasZ),1,26,dimnames = list(c("NumberOfWords"),
c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")))
for(i in 1:26){
if(NumWordTable[i] == length(subdata) && !is.na(NumWordTable[i])){
NumWordTable <- t(as.matrix(NumWordTable[,NumWordTable != length(subdata)]))
rownames(NumWordTable) <- "NumberOfWords"
}
}
for(i in 1:26){
if(NumWordTable[i] == max(NumWordTable) && !is.na(NumWordTable[i])){
c = colnames(NumWordTable)[i]
break
}
}
tc <- tc[which(tc != c)]
previousword <- ans$data$word
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
print(newword)
}
if(grepl("\\*", newword)){
words <- rbind(words,newword)
}
ans
while(n <= 80){
print(n)
########## Give Me a Word ##########
r <- POST(url,
body = list(sessionId = sessionID,
action = "nextWord"), encode = "json"
)
stop_for_status(r)
ans <- content(r, "parsed", "application/json")
########## Game Start ##########
word <- ans$data$word
wordLength <- nchar(word) # count the number of characters in the word
subdata <- dict[which(nchar(as.character(dict[,1])) == wordLength),] # find all the words have correct length
tc = "abcdefghijklmnopqrstuvwxyz" # create a guess table checker
tc <- strsplit(tc,"")[[1]]
previousword = word
newword = word
c = NULL
while(grepl("\\*", newword) && ans$data$wrongGuessCountOfCurrentWord != 10){
if(length(subdata) == 1){
for(i in 1:length(tc)){
if(grepl(tc[i], as.character(subdata))){
c = tc[i]
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
}
}
if(newword == previousword){
if(!is.null(c)){
subdata <- subdata[which(!grepl(tolower(c), subdata))]
}
NumWordsHasA <- length(subdata[which(grepl("a", subdata))])
NumWordsHasB <- length(subdata[which(grepl("b", subdata))])
NumWordsHasC <- length(subdata[which(grepl("c", subdata))])
NumWordsHasD <- length(subdata[which(grepl("d", subdata))])
NumWordsHasE <- length(subdata[which(grepl("e", subdata))])
NumWordsHasF <- length(subdata[which(grepl("f", subdata))])
NumWordsHasG <- length(subdata[which(grepl("g", subdata))])
NumWordsHasH <- length(subdata[which(grepl("h", subdata))])
NumWordsHasI <- length(subdata[which(grepl("i", subdata))])
NumWordsHasJ <- length(subdata[which(grepl("j", subdata))])
NumWordsHasK <- length(subdata[which(grepl("k", subdata))])
NumWordsHasL <- length(subdata[which(grepl("l", subdata))])
NumWordsHasM <- length(subdata[which(grepl("m", subdata))])
NumWordsHasN <- length(subdata[which(grepl("n", subdata))])
NumWordsHasO <- length(subdata[which(grepl("o", subdata))])
NumWordsHasP <- length(subdata[which(grepl("p", subdata))])
NumWordsHasQ <- length(subdata[which(grepl("q", subdata))])
NumWordsHasR <- length(subdata[which(grepl("r", subdata))])
NumWordsHasS <- length(subdata[which(grepl("s", subdata))])
NumWordsHasT <- length(subdata[which(grepl("t", subdata))])
NumWordsHasU <- length(subdata[which(grepl("u", subdata))])
NumWordsHasV <- length(subdata[which(grepl("v", subdata))])
NumWordsHasW <- length(subdata[which(grepl("w", subdata))])
NumWordsHasX <- length(subdata[which(grepl("x", subdata))])
NumWordsHasY <- length(subdata[which(grepl("y", subdata))])
NumWordsHasZ <- length(subdata[which(grepl("z", subdata))])
NumWordTable <- matrix(c(NumWordsHasA,
NumWordsHasB,
NumWordsHasC,
NumWordsHasD,
NumWordsHasE,
NumWordsHasF,
NumWordsHasG,
NumWordsHasH,
NumWordsHasI,
NumWordsHasJ,
NumWordsHasK,
NumWordsHasL,
NumWordsHasM,
NumWordsHasN,
NumWordsHasO,
NumWordsHasP,
NumWordsHasQ,
NumWordsHasR,
NumWordsHasS,
NumWordsHasT,
NumWordsHasU,
NumWordsHasV,
NumWordsHasW,
NumWordsHasX,
NumWordsHasY,
NumWordsHasZ),1,26,dimnames = list(c("NumberOfWords"),
c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")))
for(i in 1:26){
if(NumWordTable[i] == length(subdata) && !is.na(NumWordTable[i])){
NumWordTable <- t(as.matrix(NumWordTable[,NumWordTable != length(subdata)]))
rownames(NumWordTable) <- "NumberOfWords"
}
}
for(i in 1:26){
if(NumWordTable[i] == max(NumWordTable) && !is.na(NumWordTable[i])){
c = colnames(NumWordTable)[i]
break
}
}
tc <- tc[which(tc != c)]
previousword <- ans$data$word
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
if(newword != previousword){
# creat the Regex for word filtering
temp <- paste("[^", c, "]", sep="")
regex <- tolower(gsub("\\*", temp, newword))
subdata <- subdata[which(grepl(regex, as.character(subdata)))]
NumWordsHasA <- length(subdata[which(grepl("a", subdata))])
NumWordsHasB <- length(subdata[which(grepl("b", subdata))])
NumWordsHasC <- length(subdata[which(grepl("c", subdata))])
NumWordsHasD <- length(subdata[which(grepl("d", subdata))])
NumWordsHasE <- length(subdata[which(grepl("e", subdata))])
NumWordsHasF <- length(subdata[which(grepl("f", subdata))])
NumWordsHasG <- length(subdata[which(grepl("g", subdata))])
NumWordsHasH <- length(subdata[which(grepl("h", subdata))])
NumWordsHasI <- length(subdata[which(grepl("i", subdata))])
NumWordsHasJ <- length(subdata[which(grepl("j", subdata))])
NumWordsHasK <- length(subdata[which(grepl("k", subdata))])
NumWordsHasL <- length(subdata[which(grepl("l", subdata))])
NumWordsHasM <- length(subdata[which(grepl("m", subdata))])
NumWordsHasN <- length(subdata[which(grepl("n", subdata))])
NumWordsHasO <- length(subdata[which(grepl("o", subdata))])
NumWordsHasP <- length(subdata[which(grepl("p", subdata))])
NumWordsHasQ <- length(subdata[which(grepl("q", subdata))])
NumWordsHasR <- length(subdata[which(grepl("r", subdata))])
NumWordsHasS <- length(subdata[which(grepl("s", subdata))])
NumWordsHasT <- length(subdata[which(grepl("t", subdata))])
NumWordsHasU <- length(subdata[which(grepl("u", subdata))])
NumWordsHasV <- length(subdata[which(grepl("v", subdata))])
NumWordsHasW <- length(subdata[which(grepl("w", subdata))])
NumWordsHasX <- length(subdata[which(grepl("x", subdata))])
NumWordsHasY <- length(subdata[which(grepl("y", subdata))])
NumWordsHasZ <- length(subdata[which(grepl("z", subdata))])
NumWordTable <- matrix(c(NumWordsHasA,
NumWordsHasB,
NumWordsHasC,
NumWordsHasD,
NumWordsHasE,
NumWordsHasF,
NumWordsHasG,
NumWordsHasH,
NumWordsHasI,
NumWordsHasJ,
NumWordsHasK,
NumWordsHasL,
NumWordsHasM,
NumWordsHasN,
NumWordsHasO,
NumWordsHasP,
NumWordsHasQ,
NumWordsHasR,
NumWordsHasS,
NumWordsHasT,
NumWordsHasU,
NumWordsHasV,
NumWordsHasW,
NumWordsHasX,
NumWordsHasY,
NumWordsHasZ),1,26,dimnames = list(c("NumberOfWords"),
c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")))
for(i in 1:26){
if(NumWordTable[i] == length(subdata) && !is.na(NumWordTable[i])){
NumWordTable <- t(as.matrix(NumWordTable[,NumWordTable != length(subdata)]))
rownames(NumWordTable) <- "NumberOfWords"
}
}
for(i in 1:26){
if(NumWordTable[i] == max(NumWordTable) && !is.na(NumWordTable[i])){
c = colnames(NumWordTable)[i]
break
}
}
tc <- tc[which(tc != c)]
previousword <- ans$data$word
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
print(newword)
}
if(grepl("\\*", newword)){
words <- rbind(words,newword)
}
n = n + 1
}
ans
r <- POST("https://strikingly-hangman.herokuapp.com/game/on",
body = list(sessionId = sessionID,
action = "getResult"), encode = "json")
stop_for_status(r)
content(r, "parsed", "application/json")
words
r <- POST(url,
body = list(playerId = "lawliet.sun@gmail.com",
action = "startGame"), encode = "json"
)
stop_for_status(r)
ans <- content(r, "parsed", "application/json")
sessionID = ans$sessionId
n = 1
while(n <= 80){
print(n)
########## Give Me a Word ##########
r <- POST(url,
body = list(sessionId = sessionID,
action = "nextWord"), encode = "json"
)
stop_for_status(r)
ans <- content(r, "parsed", "application/json")
########## Game Start ##########
word <- ans$data$word
wordLength <- nchar(word) # count the number of characters in the word
subdata <- dict[which(nchar(as.character(dict[,1])) == wordLength),] # find all the words have correct length
tc = "abcdefghijklmnopqrstuvwxyz" # create a guess table checker
tc <- strsplit(tc,"")[[1]]
previousword = word
newword = word
c = NULL
while(grepl("\\*", newword) && ans$data$wrongGuessCountOfCurrentWord != 10){
if(length(subdata) == 1){
for(i in 1:length(tc)){
if(grepl(tc[i], as.character(subdata))){
c = tc[i]
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
}
}
if(newword == previousword){
if(!is.null(c)){
subdata <- subdata[which(!grepl(tolower(c), subdata))]
}
NumWordsHasA <- length(subdata[which(grepl("a", subdata))])
NumWordsHasB <- length(subdata[which(grepl("b", subdata))])
NumWordsHasC <- length(subdata[which(grepl("c", subdata))])
NumWordsHasD <- length(subdata[which(grepl("d", subdata))])
NumWordsHasE <- length(subdata[which(grepl("e", subdata))])
NumWordsHasF <- length(subdata[which(grepl("f", subdata))])
NumWordsHasG <- length(subdata[which(grepl("g", subdata))])
NumWordsHasH <- length(subdata[which(grepl("h", subdata))])
NumWordsHasI <- length(subdata[which(grepl("i", subdata))])
NumWordsHasJ <- length(subdata[which(grepl("j", subdata))])
NumWordsHasK <- length(subdata[which(grepl("k", subdata))])
NumWordsHasL <- length(subdata[which(grepl("l", subdata))])
NumWordsHasM <- length(subdata[which(grepl("m", subdata))])
NumWordsHasN <- length(subdata[which(grepl("n", subdata))])
NumWordsHasO <- length(subdata[which(grepl("o", subdata))])
NumWordsHasP <- length(subdata[which(grepl("p", subdata))])
NumWordsHasQ <- length(subdata[which(grepl("q", subdata))])
NumWordsHasR <- length(subdata[which(grepl("r", subdata))])
NumWordsHasS <- length(subdata[which(grepl("s", subdata))])
NumWordsHasT <- length(subdata[which(grepl("t", subdata))])
NumWordsHasU <- length(subdata[which(grepl("u", subdata))])
NumWordsHasV <- length(subdata[which(grepl("v", subdata))])
NumWordsHasW <- length(subdata[which(grepl("w", subdata))])
NumWordsHasX <- length(subdata[which(grepl("x", subdata))])
NumWordsHasY <- length(subdata[which(grepl("y", subdata))])
NumWordsHasZ <- length(subdata[which(grepl("z", subdata))])
NumWordTable <- matrix(c(NumWordsHasA,
NumWordsHasB,
NumWordsHasC,
NumWordsHasD,
NumWordsHasE,
NumWordsHasF,
NumWordsHasG,
NumWordsHasH,
NumWordsHasI,
NumWordsHasJ,
NumWordsHasK,
NumWordsHasL,
NumWordsHasM,
NumWordsHasN,
NumWordsHasO,
NumWordsHasP,
NumWordsHasQ,
NumWordsHasR,
NumWordsHasS,
NumWordsHasT,
NumWordsHasU,
NumWordsHasV,
NumWordsHasW,
NumWordsHasX,
NumWordsHasY,
NumWordsHasZ),1,26,dimnames = list(c("NumberOfWords"),
c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")))
for(i in 1:26){
if(NumWordTable[i] == length(subdata) && !is.na(NumWordTable[i])){
NumWordTable <- t(as.matrix(NumWordTable[,NumWordTable != length(subdata)]))
rownames(NumWordTable) <- "NumberOfWords"
}
}
for(i in 1:26){
if(NumWordTable[i] == max(NumWordTable) && !is.na(NumWordTable[i])){
c = colnames(NumWordTable)[i]
break
}
}
tc <- tc[which(tc != c)]
previousword <- ans$data$word
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
if(newword != previousword){
# creat the Regex for word filtering
temp <- paste("[^", c, "]", sep="")
regex <- tolower(gsub("\\*", temp, newword))
subdata <- subdata[which(grepl(regex, as.character(subdata)))]
NumWordsHasA <- length(subdata[which(grepl("a", subdata))])
NumWordsHasB <- length(subdata[which(grepl("b", subdata))])
NumWordsHasC <- length(subdata[which(grepl("c", subdata))])
NumWordsHasD <- length(subdata[which(grepl("d", subdata))])
NumWordsHasE <- length(subdata[which(grepl("e", subdata))])
NumWordsHasF <- length(subdata[which(grepl("f", subdata))])
NumWordsHasG <- length(subdata[which(grepl("g", subdata))])
NumWordsHasH <- length(subdata[which(grepl("h", subdata))])
NumWordsHasI <- length(subdata[which(grepl("i", subdata))])
NumWordsHasJ <- length(subdata[which(grepl("j", subdata))])
NumWordsHasK <- length(subdata[which(grepl("k", subdata))])
NumWordsHasL <- length(subdata[which(grepl("l", subdata))])
NumWordsHasM <- length(subdata[which(grepl("m", subdata))])
NumWordsHasN <- length(subdata[which(grepl("n", subdata))])
NumWordsHasO <- length(subdata[which(grepl("o", subdata))])
NumWordsHasP <- length(subdata[which(grepl("p", subdata))])
NumWordsHasQ <- length(subdata[which(grepl("q", subdata))])
NumWordsHasR <- length(subdata[which(grepl("r", subdata))])
NumWordsHasS <- length(subdata[which(grepl("s", subdata))])
NumWordsHasT <- length(subdata[which(grepl("t", subdata))])
NumWordsHasU <- length(subdata[which(grepl("u", subdata))])
NumWordsHasV <- length(subdata[which(grepl("v", subdata))])
NumWordsHasW <- length(subdata[which(grepl("w", subdata))])
NumWordsHasX <- length(subdata[which(grepl("x", subdata))])
NumWordsHasY <- length(subdata[which(grepl("y", subdata))])
NumWordsHasZ <- length(subdata[which(grepl("z", subdata))])
NumWordTable <- matrix(c(NumWordsHasA,
NumWordsHasB,
NumWordsHasC,
NumWordsHasD,
NumWordsHasE,
NumWordsHasF,
NumWordsHasG,
NumWordsHasH,
NumWordsHasI,
NumWordsHasJ,
NumWordsHasK,
NumWordsHasL,
NumWordsHasM,
NumWordsHasN,
NumWordsHasO,
NumWordsHasP,
NumWordsHasQ,
NumWordsHasR,
NumWordsHasS,
NumWordsHasT,
NumWordsHasU,
NumWordsHasV,
NumWordsHasW,
NumWordsHasX,
NumWordsHasY,
NumWordsHasZ),1,26,dimnames = list(c("NumberOfWords"),
c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")))
for(i in 1:26){
if(NumWordTable[i] == length(subdata) && !is.na(NumWordTable[i])){
NumWordTable <- t(as.matrix(NumWordTable[,NumWordTable != length(subdata)]))
rownames(NumWordTable) <- "NumberOfWords"
}
}
for(i in 1:26){
if(NumWordTable[i] == max(NumWordTable) && !is.na(NumWordTable[i])){
c = colnames(NumWordTable)[i]
break
}
}
tc <- tc[which(tc != c)]
previousword <- ans$data$word
r <- POST(url, body = list(sessionId = sessionID,
action = "guessWord",
guess = toupper(c)), encode = "json")
ans <- content(r, "parsed", "application/json")
newword <- ans$data$word
newword
}
print(newword)
}
if(grepl("\\*", newword)){
words <- rbind(words,newword)
}
n = n + 1
}
########## RESULT ##########
r <- POST("https://strikingly-hangman.herokuapp.com/game/on",
body = list(sessionId = sessionID,
action = "getResult"), encode = "json")
stop_for_status(r)
content(r, "parsed", "application/json")
r <- POST(url,
body = list(sessionId = sessionID,
action = "getResult"), encode = "json")
stop_for_status(r)
content(r, "parsed", "application/json")
r <- POST(url,
body = list(sessionId = sessionID,
action = "submitResult"), encode = "json")
stop_for_status(r)
content(r, "parsed", "application/json")
